; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "FotoSite"
#define MyAppVersion "1.0"
;{app} - The application directory, DefaultDirName, which the user selects on the Select Destination Location page of the wizard.
; а вот подкаталоги без возможности изменения
#define WebDir "{app}\FotoSiteReally"
#define UtilDir "{app}\util"
#define DefaultFotoFolderName "C:\Users\Администратор\Documents\Мои рисунки\foto"

[Setup]
; NOTE: The value of AppId uniquely identifies this application.
; Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{3A0FB873-597A-440B-A135-6C9D16FEDE0C}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
AppComments=Web сайт системы для просмотра фотографий в заданном при установке каталоге 
;AppVerName={#MyAppName} {#MyAppVersion}
DefaultDirName={pf}\{#MyAppName}
DefaultGroupName={#MyAppName}
OutputBaseFilename=FotoSiteSetup
Compression=lzma
SolidCompression=yes
PrivilegesRequired=admin
SetupLogging =yes

[Languages]
Name: "russian"; MessagesFile: "compiler:Languages\Russian.isl"

[Dirs]
Name: c:\logs; Permissions: everyone-full; Flags: uninsneveruninstall
Name: {#WebDir}\bin
Name: {#WebDir}\Account
Name: {#WebDir}\App_Data
Name: {#WebDir}\Content\themes\base\images
Name: {#WebDir}\Content\themes\base\minified\images
Name: {#WebDir}\Images
Name: {#WebDir}\Scripts\WebForms\MSAjax

[Icons]
Name: "{group}\{cm:UninstallProgram,{#MyAppName}}"; Filename: "{uninstallexe}"; IconFilename: {sys}\shell32.dll; IconIndex: 32

[CustomMessages]
russian.InstallDotNet =Перед установкой web сайта системы диспетчеризации       %nнеобходимо установить .NET Framework 4.5.       %n%nУстановка отменяется!
russian.InstallIIS =Перед установкой web сайта системы диспетчеризации       %nнеобходимо установить Misrosoft IIS.       %n%nУстановка отменяется!
russian.VirtualDirNotInstalled=Неудалось создать виртуальный каталог IIS для web-сайта!      %n%nНеобходимо сделать эту операцию вручную!
russian.NoLoadFile=Не удалось загрузить файл      %n%1      %n
russian.NoModifyConfig=Не удалось применить изменения конфигурации!     %n%nВручную внесите изменения в файл конфигурации      %n%1      %n
russian.NoStringToReplace=В файле конфигурации %n%1      %nне найдено ни одного вхождения строки %2      %n
russian.RepalceFailed=Системная ошибка при изменении конфигурации:      %n%1        %n
russian.BadReplaceCmdLine=Неправильная командная строка для изменения конфигурации:      %n%1        %n

[UninstallDelete]
;WARNING! В некоторых случаях удаление каталога в котором лежал сайт приводит к тому, что у серверной части ASP.NET
;сносит крышу и после переустановки сайт не просматривается (до перезагрузки или убийства процесса w3wp.exe)
;Ну их в баню такие подлянки, пусть лучше каталог болтается после деинсталляции.
;Name: {#WebDir}; Type: filesandordirs
Name: {app}; Type: dirifempty

[Files]
; NOTE: Don't use "Flags: ignoreversion" on any shared system files
; Утилитка для замен текста в файлах
Source: ".\util\replace.exe"; DestDir: "{#UtilDir}"; Flags: ignoreversion
; Где recursesubdirs - обшариваются все каталоги
Source: "..\FotoSite\bin\*.dll"; DestDir: "{#WebDir}\bin"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "..\FotoSite\*.ico"; DestDir: "{#WebDir}"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "..\FotoSite\*.aspx"; DestDir: "{#WebDir}"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "..\FotoSite\*.ascx"; DestDir: "{#WebDir}"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "..\FotoSite\*.asax"; DestDir: "{#WebDir}"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "..\FotoSite\*.Master"; DestDir: "{#WebDir}"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "..\FotoSite\*.css"; DestDir: "{#WebDir}"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "..\FotoSite\*.png"; DestDir: "{#WebDir}"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "..\FotoSite\*.js"; DestDir: "{#WebDir}"; Flags: ignoreversion recursesubdirs createallsubdirs
; Web.config-ов два, а менять параметр нужно только в одном
Source: "..\FotoSite\Web.config"; DestDir: "{#WebDir}"; Flags: ignoreversion; AfterInstall: ModifyConfig('{#WebDir}\Web.config')
Source: "..\FotoSite\Account\Web.config"; DestDir: "{#WebDir}\Account"; Flags: ignoreversion
; Последний файл сайта, можно создавать сам сайт
Source: "..\FotoSite\Bundle.config"; DestDir: "{#WebDir}"; Flags: ignoreversion; AfterInstall: CreateFotoSiteVirtualDir()

[Code]
var
  WebSiteNamePage: TInputQueryWizardPage;
  WebSiteName: string;

  FotoFolderNamePage: TInputDirWizardPage;
  FotoFolderName: string;

const
  IISServerName = 'localhost';
  IISServerNumber = '1';

// Создание формы для ввода имени Web сайта
procedure CreateWebSiteNamePage;
begin
	// Форма для ввода имени Web сайта
	WebSiteNamePage := CreateInputQueryPage(wpSelectProgramGroup, 'Web сайт', 'Уточнение имени Web сайта',
		'Исправьте требуемое имя Web сайта если оно отличается от указанного:');

	// Поле для ввода
	WebSiteNamePage.Add('Имя сайта:', False);

	// Значение по умолчанию
	WebSiteNamePage.Values[0] := GetPreviousData('WebSiteName', 'FotoSite');
end;

// Создание формы для ввода имени каталога с фотографиями
procedure CreateFotoFolderNamePage;
begin
	// Форма для ввода имени каталога с фотографиями
  // WebSiteNamePage.ID - после какой формы
	FotoFolderNamePage := CreateInputDirPage(WebSiteNamePage.ID, 'Web сайт', 'Уточнение имени папки с фотографиями',
		'Исправьте имя папки с фотографиями, которую будет показывать сайт, если она отличается от указанной:', false, '');

	// Поле для ввода
	FotoFolderNamePage.Add('Каталог с фотографиями:');

	// Значение по умолчанию
	FotoFolderNamePage.Values[0] := GetPreviousData('FotoFolderName', '{#DefaultFotoFolderName}');
end;

// Добавление к инсталлятору дополнительных страниц с настройками
procedure InitializeWizard;
begin
	CreateWebSiteNamePage();
  CreateFotoFolderNamePage();
end;

// Проверка, что установлен .NET Framework 4
function IsDotNet4Installed(): Boolean;
begin
	result := RegKeyExists(HKEY_LOCAL_MACHINE, 'SOFTWARE\Microsoft\NET Framework Setup\NDP\v4');
	if not result then
	begin
		MsgBox( CustomMessage('InstallDotNet'), mbError, MB_OK );
	end;
end;

// Проверка, что установлен Microsoft IIS
function IsIISInstalled() : Boolean;
var
	IIS: Variant;
begin
  try
    IIS := CreateOleObject('IISNamespace');
	result:=true;
  except
    result:=false;
	MsgBox( CustomMessage('InstallIIS'), mbError, MB_OK );
  end;
end;

// Создание сайта на основе каталога со скопированными файлами
procedure CreateFotoSiteVirtualDir();
var
	IIS, WebSite, WebServer, WebRoot, VDir: Variant;
	ErrorCode: Integer;
  Success: Boolean;

begin
	Success:=true;
	// подключение к IIS
	try
		IIS := CreateOleObject('IISNamespace');
	except
		Success:=false;
		MsgBox( CustomMessage('InstallIIS'), mbError, MB_OK );
	end;

	if Success then
	begin
		try
			// берем рычаги
			WebSiteName := WebSiteNamePage.Values[0];
			WebSite := IIS.GetObject('IIsWebService', IISServerName + '/w3svc');
			WebServer := WebSite.GetObject('IIsWebServer', IISServerNumber);
			WebRoot := WebServer.GetObject('IIsWebVirtualDir', 'Root');

			// удаляем виртуальный каталог, который собираемся создавать
			try
				WebRoot.Delete('IIsWebVirtualDir', WebSiteName);
				// сохранить изменения
				WebRoot.SetInfo();
			except
			end;

			// создаем виртуальный каталог
			VDir := WebRoot.Create('IIsWebVirtualDir', WebSiteName);
			VDir.AccessRead := True;
			VDir.AccessScript:=true;
			VDir.DefaultDoc:='default.aspx';
			VDir.AppFriendlyName := WebSiteName;
			VDir.Path := ExpandConstant('{#WebDir}');
			VDir.AppCreate(True);
			// сохранить изменения
			VDir.SetInfo();

			// открываем сайт в браузере
			ShellExec( 'open', 'http://' + IISServerName + '/' + WebSiteName + '/', '', '', SW_SHOW, ewNoWait, ErrorCode );
			Success:=true;
		except
			MsgBox( CustomMessage('VirtualDirNotInstalled'), mbError, MB_OK );
			Success:=false;
		end;
	end;
end;

// Удаление виртуального каталога
function DeleteFotoSiteVirtualDir() : Boolean;
var
	IIS, WebSite, WebServer, WebRoot: Variant;
begin
	result:=true;
	// подключение к IIS
	try
		IIS := CreateOleObject('IISNamespace');
	except
		result:=false;
	end;

	if result then
	begin
		try
			// берем рычаги
			WebSite := IIS.GetObject('IIsWebService', IISServerName + '/w3svc');
			WebServer := WebSite.GetObject('IIsWebServer', IISServerNumber);
			WebRoot := WebServer.GetObject('IIsWebVirtualDir', 'Root');

			// удаляем виртуальный каталог
			try
				WebRoot.Delete('IIsWebVirtualDir', WebSiteName);
				// сохранить изменения
				WebRoot.SetInfo();
			except
			end;
			result:=true;
		except
			result:=false;
		end;
	end;
end;

// Замена подстроки в заданном файле
function ReplaceInFile(const filename:string; const strfrom:string; const strto:string ): Boolean;
var
  ResultCode: Integer;
  params: String;

begin
  params := '"' + filename + '" "' + strfrom + '" "' + strto + '"';
  Log('params: ' + params);

  if Exec(ExpandConstant('{#UtilDir}\replace.exe'), params, ExpandConstant('{#UtilDir}'), SW_SHOW,
     ewWaitUntilTerminated, ResultCode) then
  begin
    if ResultCode = 0 then
    begin
      result:=true;
    end else
    begin
      if ResultCode = 1 then
      begin
        result:=false;
        MsgBox( FmtMessage(CustomMessage('NoStringToReplace'), [filename,strfrom]), mbError, MB_OK );
      end else
      begin
        if ResultCode = -1 then
        begin
          result:=false;
          MsgBox( FmtMessage(CustomMessage('BadReplaceCmdLine'), [params]), mbError, MB_OK );
        end else
        begin
          result:=false;
        end
      end
    end
  end
  else begin
		result:=false;
		MsgBox( FmtMessage(CustomMessage('RepalceFailed'), [SysErrorMessage(ResultCode)]), mbError, MB_OK );
  end;

  if result=false then
  begin
    MsgBox( FmtMessage(CustomMessage('NoModifyConfig'), [filename]), mbError, MB_OK );
  end
end;

// изменение файлов конфигурации, если было задано другое имя сервера
procedure ModifyConfig(const configfile:string);
begin
	configfile:=ExpandConstant(configfile);
  FotoFolderName:=FotoFolderNamePage.Values[0];

	if FotoFolderName <> '{#DefaultFotoFolderName}' then
	begin
		// Исправление имени сервера в конфигурации
		// Результат не проверяем, т.к. при переустановках ни одной замены
		// в однажды исправленом файле - это нормальная ситуация

    // защита от возможного обратного слэша в конце, если вдруг
    // появится, изгадит всю малину, притащив за собой
    // кавыку " из командной строки
    StringChangeEx(FotoFolderName, '\', '/', True);

		ReplaceInFile(configfile, '{#DefaultFotoFolderName}', FotoFolderName);
	end;
end;

// Действия перед установкой
procedure BeforeInstall();
begin
end;

// Действия после установки
procedure PostInstall();
begin
end;

// Действия перед деинсталляцией
procedure BeforeUninstall();
begin
	WebSiteName := GetPreviousData('WebSiteName', 'FotoSite');
end;

// Действия после деинсталляции
procedure PostUninstall();
begin
	DeleteFotoSiteVirtualDir();
end;

function InitializeSetup(): Boolean;
begin
	// Проверка, что установлено все необходимое ПО
	result := IsDotNet4Installed() and IsIISInstalled();
end;

// Действия на различных фазах установки
procedure CurStepChanged(CurStep: TSetupStep);
begin
  if CurStep = ssInstall then //непосредственно перед началом инсталляции
  begin
	BeforeInstall();
  end
  else
  begin
	  if CurStep = ssPostInstall then
	  begin
		PostInstall();
	  end
	  else
	  begin
		  if CurStep = ssDone then
		  begin
			//MsgBox( 'ssDone', mbConfirmation, MB_OK );
		  end;
	  end;
  end;
end;

// Действия на различных фазах деинсталляции
procedure CurUninstallStepChanged(CurUninstallStep: TUninstallStep);
begin
  if CurUninstallStep = usUninstall then //непосредственно перед началом деинсталляции
  begin
	BeforeUninstall();
  end
  else
  begin
	  if CurUninstallStep = usPostUninstall then // после деинсталляции, но перед финальным сообщением
	  begin
		PostUninstall();
	  end
	  else
	  begin
		  if CurUninstallStep = usDone then // после финального сообщения
		  begin
			//MsgBox( 'usDone ', mbConfirmation, MB_OK );
		  end;
	  end;
  end;
end;

// сохранение данных после успешной инсталляции для всех последующих
procedure RegisterPreviousData(PreviousDataKey: Integer);
begin
	SetPreviousData(PreviousDataKey, 'WebSiteName', WebSiteNamePage.Values[0]);
	SetPreviousData(PreviousDataKey, 'FotoFolderName', FotoFolderNamePage.Values[0]);
end;

// Обработчики переходов между страницами инсталлятора
function NextButtonClick(CurPageID: Integer): Boolean;
begin
	result := true;
end;

